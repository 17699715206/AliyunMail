Python+Selenium
2020年1月6日
20:09
 
selenium+Python环境配置
1.安装Python开发环境
2.安装selenium   pip install selenium
3.安装webdriver(浏览器驱动)
注意:webdriver需要对应的浏览器版本以及selenium版本对应
webdriver 要放到Python的安装目录下才生效.
 
#导入selenium的webdriver驱动
fromseleniumimportwebdriver
 
#生命一个浏览器对象
browser=webdriver.Chrome()
#在浏览器中打开该url(一定要加上http或者https不然会报错)
url="https:\\baidu.com"
browser.get(url)
 
 
#定位方法
'''
id:find_element_by_id()
name:find_element_by_id_name
classname:find_element_by_class_name()
tagname:find_element_by_tag_name()
linktext:find_element_by_link_text()
partiallinktext:find_element_by_partial_link_text()
xpath:find_element_by_xpath()
cssselector:find_element_by_css_selector()
'''
'''
browser.find_element_by_id("kw")
browser.find_element_by_name("wd")
browser.find_element_by_class_name("s_ipt")
browser.find_element_by_tag_name("input")
browser.find_element_by_xpath("/html/body/div[1]/div[1]/div/div[1]/div/form/span[1]/input")
browser.find_element_by_link_text("新闻")
browser.find_element_by_css_selector("#kw")
#在浏览器开发者模式下选中要定位的位置右键选择Copy选择需要的方式,有xpath和fullXpth和cssselector
'''
 
 
#元素操作
'''
clear()：清除文本
send_keys(value)：模拟按键输入
click()：单击元素
browser.find_element_by_id("kw").clear()
browser.find_element_by_id("kw").send_keys("selenium")
browser.find_element_by_id("su").click()
submit()提交
search_text.submit()
search_text=browser.find_element_by_id('kw')
search_text.send_keys('selenium')
search_text.submit()
 
'''
#鼠标事件
'''
在WebDriver中,将这些关于鼠标操作的方法封装在ActionChains类中.
fromselenium.webdriverimportActionChains
导入提供鼠标操作的ActionChains类
 
perform()：执行所有ActionChains中存储的行为
context_click()：右击
double_click()：双击
drag_and_drop()：拖动
move_to_element()：鼠标悬停
 
#定位到要悬停的元素
above=driver.find_element_by_link_text("设置")
#对定位到的元素执行鼠标悬停操作
ActionChains(driver).move_to_element(above).perform()
 
ActionChains(driver)调用ActionChains()类，将浏览器驱动driver作为参数传入
move_to_element(above)context_click()方法用于模拟鼠标右键操作在调用时需要指定元素定位
perform()执行所有ActionChains中存储的行为可以理解成是对整个操作的提交动作
 
'''
#键盘事件
'''
fromselenium.webdriver.common.keysimportKeys
导入提供键盘输入的Keys类
 
send_keys(Keys.BACK_SPACE)删除键（BackSpace）
send_keys(Keys.SPACE)空格键(Space)
send_keys(Keys.TAB)制表键(Tab)
send_keys(Keys.ESCAPE)回退键（Esc）
send_keys(Keys.ENTER)回车键（Enter）
send_keys(Keys.CONTROL,'a')全选（Ctrl+A）
send_keys(Keys.CONTROL,'c')复制（Ctrl+C）
send_keys(Keys.CONTROL,'x')剪切（Ctrl+X）
send_keys(Keys.CONTROL,'v')粘贴（Ctrl+V）
send_keys(Keys.F1)键盘F1...F12
 
'''
 
#断言信息
 
'''
title：用于获得当前页面的标题
current_url：用户获得当前页面的URL
text：获取搜索条目的文本信息
 
'''
#设置元素等待
'''
WebDriver提供了两种类型的等待：显式等待和隐式等待
显示等待
显式等待使WebdDriver等待某个条件成立时继续执行，否则在达到最大时长时抛出超时异常(TimeoutException)
 
element=WebDriverWait(driver,5,0.5).until(
EC.presence_of_element_located((By.ID,"kw"))
)
 
WebDriverWait类是由WebDirver提供的等待方法在设置时间内，默认每隔一段时间检测一次当前页面元素是否存在，如果超过设置时间检测不到则抛出异常具体格式如下：
WebDriverWait(driver,timeout,poll_frequency=0.5,ignored_exceptions=None)
driver：浏览器驱动
timeout：最长超时时间，默认以秒为单位
poll_frequency：检测的间隔（步长）时间，默认为0.5S
ignored_exceptions：超时后的异常信息，默认情况下抛NoSuchElementException异常
WebDriverWait()一般由until()或until_not()方法配合使用，下面是until()和until_not()方法的说明
until(method,message=‘’)
调用该方法提供的驱动程序作为一个参数，直到返回值为True
until_not(method,message=‘’)
调用该方法提供的驱动程序作为一个参数，直到返回值为False
 
隐式等待:
WebDriver提供了implicitly_wait()方法来实现隐式等待，默认设置为0。它的用法相对来说要简单得多
driver.implicitly_wait(10)
try:
print(ctime())
driver.find_element_by_id("kw22").send_keys('selenium')
exceptNoSuchElementExceptionase:
print(e)
finally:
print(ctime())
implicitly_wait()默认参数的单位为秒，本例中设置等待时长为10秒首先这10秒并非一个固定的等待时间，它并不影响脚本的执行速度其次，它并不针对页面上的某一元素进行等待当脚本执行到某个元素定位时，如果元素可以定位，则继续执行；如果元素定位不到，则它将以轮询的方式不断地判断元素是否被定位到假设在第6秒定位到了元素则继续执行，若直到超出设置时长（10秒）还没有定位到元素，则抛出异常
 
'''
#定位一组元素
'''
find_elements_by_id()
find_elements_by_name()
find_elements_by_class_name()
find_elements_by_tag_name()
find_elements_by_link_text()
find_elements_by_partial_link_text()
find_elements_by_xpath()
find_elements_by_css_selector()
定位一组元素的方法与定位单个元素的方法类似，唯一的区别是在单词element后面多了一个s表示复数
'''
 
#多表单切换
 
'''
在Web应用中经常会遇到frame/iframe表单嵌套页面的应用，WebDriver只能在一个页面上对元素识别与定位，对于frame/iframe表单内嵌页面上的元素无法直接定位这时就需要通过switch_to.frame()方法将当前定位的主体切换为frame/iframe表单的内嵌页面中
 
进入到界面后并不是账号密码登录界面,需要点击切换一下,
driver.find_element_by_id("lbNormal").click().
不能通过id或者name定位,id是随机变化的,每次刷新页面都会获取到一个新的id,所以这里用fullxpath来定位.
xf=driver.find_element_by_xpath("/html/body/div[2]/div[3]/div/div[3]/div[4]/div[1]/div/iframe")
 
driver.switch_to.frame(xf)
driver.find_element_by_name("email").clear()
driver.find_element_by_name("email").send_keys("username")
driver.find_element_by_name("password").clear()
driver.find_element_by_name("password").send_keys("password")
driver.find_element_by_id("dologin").click()
driver.switch_to.default_content()
 
'''
#多窗口切换
 
'''
在页面操作过程中有时候点击某个链接会弹出新的窗口，这时就需要主机切换到新打开的窗口上进行操作WebDriver提供了switch_to.window()方法，可以实现在不同的窗口之间切换
#获得百度搜索窗口句柄
sreach_windows=driver.current_window_handle
 
driver.find_element_by_link_text('登录').click()
driver.find_element_by_link_text("立即注册").click()
 
#获得当前所有打开的窗口的句柄
all_handles=driver.window_handles
 
#进入注册窗口
forhandleinall_handles:
ifhandle!=sreach_windows:
driver.switch_to.window(handle)
print('nowregisterwindow!')
driver.find_element_by_name("userName").send_keys('username')
driver.find_element_by_name('password').send_keys('password')
time.sleep(2)
 
current_window_handle：获得当前窗口句柄
window_handles：返回所有窗口的句柄到当前会话
switch_to.window()：用于切换到相应的窗口，与上一节的switch_to.frame()类似，前者用于不同窗口的切换，后者用于不同表单之间的切换
 
'''
 
 
#警告框处理
 
'''
在WebDriver中处理JavaScript所生成的alert、confirm以及prompt十分简单，具体做法是使用switch_to.alert方法定位到alert/confirm/prompt，然后使用text/accept/dismiss/send_keys等方法进行操作
text：返回alert/confirm/prompt中的文字信息
accept()：接受现有警告框
dismiss()：解散现有警告框
send_keys(keysToSend)：发送文本至警告框keysToSend：将文本发送至警告框
switch_to_alert()方法接受这个弹窗
driver.switch_to.alert.accept()
通过switch_to_alert()方法获取当前页面上的警告框，并使用accept()方法接受警告框
 
'''
 
 
#下拉框选择
 
'''
WebDriver提供了Select类来处理下拉框如百度搜索设置的下拉框
fromselenium.webdriver.support.selectimportSelect
 
sel=driver.find_element_by_xpath("//select[@id='nr']")
Select(sel).select_by_value('50')#显示50条
 
 
select类用于定位select标签
select_by_value()方法用于定位下接选项中的value值
 
'''
 
#关闭浏览器
browser.close()
 
 
 
 
